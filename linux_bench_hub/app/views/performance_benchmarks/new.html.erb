<h1>New Benchmark</h1>
<%= form_with model: @performance_benchmark, local: true, class: 'mt-4 needs-validation', novalidate: true do |form| %>
  <div class="mb-3">
    <%= form.label :name, class: 'form-label' %>
    <%= form.text_field :name, class: 'form-control', placeholder: 'Enter benchmark name', required: true %>
    <div class="invalid-feedback">
      Please provide a benchmark name.
    </div>
  </div>

  <div class="mb-3">
    <%= form.label :linux_os, 'Linux OS', class: 'form-label' %>
    <%= form.select :linux_os, options_for_select(['Ubuntu', 'Fedora', 'Debian']), {}, class: 'form-select', required: true %>
    <div class="invalid-feedback">
      Please select a Linux OS.
    </div>
  </div>

  <div class="mb-3" id="benchmarks-checks">
    <label class="form-label">Benchmarks</label>
    <%= form.collection_check_boxes :benchmarks, ['CPU', 'Memory', 'Network'], :to_s, :to_s do |b| %>
      <div class="form-check">
        <%= b.check_box class: 'form-check-input' %>
        <%= b.label class: 'form-check-label' %>
      </div>
    <% end %>
    <div class="invalid-feedback">
      Please select at least one benchmark.
    </div>
  </div>

  <div class="mb-3">
    <%= form.submit 'Create Benchmark', class: 'btn btn-primary' %>
    <%= link_to 'Back', performance_benchmarks_path, class: 'btn btn-secondary ms-2' %>
  </div>
<% end %>

<!-- JavaScript for Client-Side Validation -->
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.querySelector('.needs-validation');

    form.addEventListener('submit', (event) => {
      // Prevent form submission to check benchmarks
      let isValid = true;

      // Check if at least one benchmark is selected
      const benchmarkCheckboxes = form.querySelectorAll('input[name="performance_benchmark[benchmarks][]"]');
      const isBenchmarkChecked = Array.from(benchmarkCheckboxes).some(checkbox => checkbox.checked);

      if (!isBenchmarkChecked) {
        isValid = false;
        const benchmarkFeedback = form.querySelector('#benchmarks-checks .invalid-feedback');
        benchmarkFeedback.style.display = 'block';
      } else {
        const benchmarkFeedback = form.querySelector('#benchmarks-checks .invalid-feedback');
        benchmarkFeedback.style.display = 'none';
      }

      // Check other form validations
      if (!form.checkValidity() || !isValid) {
        event.preventDefault();
        event.stopPropagation();
      }

      form.classList.add('was-validated');
    }, false);
  });
</script>