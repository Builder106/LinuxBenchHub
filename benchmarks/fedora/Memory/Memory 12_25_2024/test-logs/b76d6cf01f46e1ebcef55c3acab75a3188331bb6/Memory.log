#####
Memory - Run 1
2024-12-26 00:08:31
#####
tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   1935.4 MB/s (23.6%)
 C copy backwards (32 byte blocks)                    :   1275.8 MB/s (17.9%)
 C copy backwards (64 byte blocks)                    :   1604.9 MB/s (22.9%)
 C copy                                               :   2856.5 MB/s (26.7%)
 C copy prefetched (32 bytes step)                    :   3483.6 MB/s (24.8%)
 C copy prefetched (64 bytes step)                    :   2900.9 MB/s (19.1%)
 C 2-pass copy                                        :   2676.2 MB/s (18.0%)
 C 2-pass copy prefetched (32 bytes step)             :   3493.2 MB/s (18.1%)
 C 2-pass copy prefetched (64 bytes step)             :   3602.6 MB/s (18.4%)
 C fill                                               :   4781.7 MB/s (20.1%)
 C fill (shuffle within 16 byte blocks)               :   7288.7 MB/s (28.3%)
 C fill (shuffle within 32 byte blocks)               :   8003.3 MB/s (20.2%)
 C fill (shuffle within 64 byte blocks)               :   7872.7 MB/s (28.5%)
 ---
 standard memcpy                                      :   7505.5 MB/s (29.3%)
 standard memset                                      :  23921.2 MB/s (16.5%)
 ---
 MOVSB copy                                           :   6104.2 MB/s (27.7%)
 MOVSD copy                                           :   3982.6 MB/s (20.4%)
 SSE2 copy                                            :   2718.6 MB/s (22.3%)
 SSE2 nontemporal copy                                :   3289.6 MB/s (20.0%)
 SSE2 copy prefetched (32 bytes step)                 :   1766.3 MB/s (29.7%)
 SSE2 copy prefetched (64 bytes step)                 :   1893.0 MB/s (31.5%)
 SSE2 nontemporal copy prefetched (32 bytes step)     :   4051.7 MB/s (19.7%)
 SSE2 nontemporal copy prefetched (64 bytes step)     :   5261.3 MB/s (23.1%)
 SSE2 2-pass copy                                     :   3075.0 MB/s (22.9%)
 SSE2 2-pass copy prefetched (32 bytes step)          :   4329.1 MB/s (24.4%)
 SSE2 2-pass copy prefetched (64 bytes step)          :   3378.3 MB/s (23.7%)
 SSE2 2-pass nontemporal copy                         :   3023.4 MB/s (23.6%)
 SSE2 fill                                            :  11483.8 MB/s (21.8%)
 SSE2 nontemporal fill                                :  22813.8 MB/s (11.9%)

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read, [MADV_NOHUGEPAGE]
      1024 :    0.1 ns          /     0.3 ns 
      2048 :    0.1 ns          /     0.3 ns 
      4096 :    0.1 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.2 ns 
     16384 :    0.4 ns          /     0.2 ns 
     32768 :    1.1 ns          /     2.3 ns 
     65536 :    3.7 ns          /     5.2 ns 
    131072 :    3.9 ns          /     4.7 ns 
    262144 :   11.6 ns          /    12.8 ns 
    524288 :   15.8 ns          /    21.5 ns 
   1048576 :   24.0 ns          /    26.0 ns 
   2097152 :   37.9 ns          /    41.0 ns 
   4194304 :   80.5 ns          /   100.7 ns 
   8388608 :  115.7 ns          /   136.1 ns 
  16777216 :  135.3 ns          /   151.8 ns 
  33554432 :  150.0 ns          /   166.1 ns 
  67108864 :  187.2 ns          /   195.2 ns 

block size : single random read / dual random read, [MADV_HUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.4 ns          /     2.5 ns 
     65536 :    2.4 ns          /     3.2 ns 
    131072 :    4.5 ns          /     5.2 ns 
    262144 :    7.1 ns          /     9.5 ns 
    524288 :   14.5 ns          /    18.8 ns 
   1048576 :   20.6 ns          /    25.3 ns 
   2097152 :   37.0 ns          /    39.9 ns 
   4194304 :  119.2 ns          /   142.4 ns 
   8388608 :  111.1 ns          /   127.3 ns 
  16777216 :  129.6 ns          /   154.4 ns 
  33554432 :  136.3 ns          /   153.6 ns 
  67108864 :  146.7 ns          /   161.1 ns 

#####
Memory - Run 2
2024-12-26 00:21:07
#####
tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   5747.5 MB/s (14.1%)
 C copy backwards (32 byte blocks)                    :   6058.7 MB/s (4.0%)
 C copy backwards (64 byte blocks)                    :   5989.4 MB/s (4.8%)
 C copy                                               :   6132.3 MB/s (4.9%)
 C copy prefetched (32 bytes step)                    :   6522.0 MB/s (4.5%)
 C copy prefetched (64 bytes step)                    :   6572.8 MB/s (6.8%)
 C 2-pass copy                                        :   4222.6 MB/s (10.1%)
 C 2-pass copy prefetched (32 bytes step)             :   4323.1 MB/s (5.7%)
 C 2-pass copy prefetched (64 bytes step)             :   4293.2 MB/s (6.7%)
 C fill                                               :  10053.1 MB/s (4.4%)
 C fill (shuffle within 16 byte blocks)               :   9978.4 MB/s (6.0%)
 C fill (shuffle within 32 byte blocks)               :   9950.1 MB/s (7.8%)
 C fill (shuffle within 64 byte blocks)               :  10094.8 MB/s (20.4%)
 ---
 standard memcpy                                      :   9903.4 MB/s (20.1%)
 standard memset                                      :  21045.1 MB/s (18.5%)
 ---
 MOVSB copy                                           :   6830.9 MB/s (19.4%)
 MOVSD copy                                           :   3274.5 MB/s (17.3%)
 SSE2 copy                                            :   4533.4 MB/s (13.6%)
 SSE2 nontemporal copy                                :   6346.0 MB/s (20.8%)
 SSE2 copy prefetched (32 bytes step)                 :   4903.7 MB/s (11.7%)
 SSE2 copy prefetched (64 bytes step)                 :   5108.8 MB/s (15.2%)
 SSE2 nontemporal copy prefetched (32 bytes step)     :   6182.2 MB/s (29.1%)
 SSE2 nontemporal copy prefetched (64 bytes step)     :   6612.1 MB/s (20.5%)
 SSE2 2-pass copy                                     :   4407.3 MB/s (16.7%)
 SSE2 2-pass copy prefetched (32 bytes step)          :   3226.3 MB/s (27.9%)
 SSE2 2-pass copy prefetched (64 bytes step)          :   3867.3 MB/s (25.1%)
 SSE2 2-pass nontemporal copy                         :   3847.7 MB/s (10.3%)
 SSE2 fill                                            :  10208.5 MB/s (15.1%)
 SSE2 nontemporal fill                                :  17671.5 MB/s (17.2%)

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read, [MADV_NOHUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    0.0 ns          /     1.0 ns 
    131072 :    1.0 ns          /     3.0 ns 
    262144 :    4.9 ns          /     7.9 ns 
    524288 :   12.2 ns          /    15.9 ns 
   1048576 :   19.1 ns          /    22.3 ns 
   2097152 :   34.8 ns          /    35.7 ns 
   4194304 :   77.0 ns          /    99.9 ns 
   8388608 :  149.3 ns          /   151.8 ns 
  16777216 :  138.1 ns          /   153.5 ns 
  33554432 :  156.5 ns          /   166.1 ns 
  67108864 :  166.2 ns          /   175.9 ns 

block size : single random read / dual random read, [MADV_HUGEPAGE]
      1024 :    0.0 ns          /     0.4 ns 
      2048 :    0.0 ns          /     0.7 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.5 ns          /     0.4 ns 
     16384 :    0.1 ns          /     0.2 ns 
     32768 :    0.3 ns          /     0.4 ns 
     65536 :    2.3 ns          /     3.7 ns 
    131072 :    3.3 ns          /     4.9 ns 
    262144 :    7.8 ns          /     9.2 ns 
    524288 :   14.9 ns          /    17.9 ns 
   1048576 :   23.0 ns          /    25.3 ns 
   2097152 :   37.8 ns          /    46.8 ns 
   4194304 :   80.9 ns          /   104.0 ns 
   8388608 :  111.1 ns          /   132.6 ns 
  16777216 :  127.9 ns          /   144.4 ns 
  33554432 :  133.7 ns          /   151.2 ns 
  67108864 :  139.2 ns          /   158.4 ns 

#####
Memory - Run 3
2024-12-26 00:31:55
#####
tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   5852.5 MB/s (2.9%)
 C copy backwards (32 byte blocks)                    :   5919.4 MB/s (2.8%)
 C copy backwards (64 byte blocks)                    :   5806.8 MB/s (1.8%)
 C copy                                               :   6185.2 MB/s (11.6%)
 C copy prefetched (32 bytes step)                    :   6444.1 MB/s
 C copy prefetched (64 bytes step)                    :   6464.6 MB/s (22.5%)
 C 2-pass copy                                        :   4149.3 MB/s (16.0%)
 C 2-pass copy prefetched (32 bytes step)             :   3562.0 MB/s (20.4%)
 C 2-pass copy prefetched (64 bytes step)             :   3020.5 MB/s (17.0%)
 C fill                                               :   9744.4 MB/s (17.2%)
 C fill (shuffle within 16 byte blocks)               :   8348.2 MB/s (15.8%)
 C fill (shuffle within 32 byte blocks)               :   8165.5 MB/s (15.6%)
 C fill (shuffle within 64 byte blocks)               :   6502.2 MB/s (30.6%)
 ---
 standard memcpy                                      :   6362.0 MB/s (17.6%)
 standard memset                                      :  20835.6 MB/s (18.5%)
 ---
 MOVSB copy                                           :   5646.4 MB/s (16.0%)
 MOVSD copy                                           :   3147.2 MB/s (35.4%)
 SSE2 copy                                            :   6732.7 MB/s (15.7%)
 SSE2 nontemporal copy                                :   8336.4 MB/s (18.4%)
 SSE2 copy prefetched (32 bytes step)                 :   5564.1 MB/s (20.2%)
 SSE2 copy prefetched (64 bytes step)                 :   4470.2 MB/s (23.6%)
 SSE2 nontemporal copy prefetched (32 bytes step)     :   6654.5 MB/s (18.8%)
 SSE2 nontemporal copy prefetched (64 bytes step)     :   8159.2 MB/s (19.3%)
 SSE2 2-pass copy                                     :   4138.4 MB/s (32.3%)
 SSE2 2-pass copy prefetched (32 bytes step)          :   2868.4 MB/s (22.8%)
 SSE2 2-pass copy prefetched (64 bytes step)          :   3686.9 MB/s (29.4%)
 SSE2 2-pass nontemporal copy                         :   2475.2 MB/s (15.3%)
 SSE2 fill                                            :   7858.0 MB/s (12.6%)
 SSE2 nontemporal fill                                :  22869.3 MB/s (35.5%)

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read, [MADV_NOHUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.1 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.6 ns 
     16384 :    0.0 ns          /     0.2 ns 
     32768 :    0.4 ns          /     0.8 ns 
     65536 :    2.1 ns          /     3.1 ns 
    131072 :    3.5 ns          /     4.8 ns 
    262144 :    7.5 ns          /     9.6 ns 
    524288 :   15.2 ns          /    18.2 ns 
   1048576 :   20.3 ns          /    25.4 ns 
   2097152 :   36.6 ns          /    44.1 ns 
   4194304 :   76.7 ns          /    84.3 ns 
   8388608 :  117.1 ns          /   132.8 ns 
  16777216 :  134.8 ns          /   152.9 ns 
  33554432 :  157.4 ns          /   181.5 ns 
  67108864 :  136.4 ns          /   154.7 ns 

block size : single random read / dual random read, [MADV_HUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.2 ns          /     0.2 ns 
     16384 :    0.6 ns          /     0.7 ns 
     32768 :    0.9 ns          /     1.1 ns 
     65536 :    1.7 ns          /     2.0 ns 
    131072 :    2.0 ns          /     2.2 ns 
    262144 :    6.4 ns          /     7.2 ns 
    524288 :    9.3 ns          /    12.0 ns 
   1048576 :   13.9 ns          /    15.3 ns 
   2097152 :   22.3 ns          /    23.5 ns 
   4194304 :   44.3 ns          /    57.7 ns 
   8388608 :   65.2 ns          /    78.0 ns 
  16777216 :   80.6 ns          /    90.1 ns 
  33554432 :   92.0 ns          /    99.4 ns 
  67108864 :  125.2 ns          /   142.7 ns 

#####
Memory - Run 4
2024-12-26 00:45:51
#####
tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   6929.8 MB/s (8.6%)
 C copy backwards (32 byte blocks)                    :   5204.5 MB/s (3.0%)
 C copy backwards (64 byte blocks)                    :   4631.8 MB/s (14.6%)
 C copy                                               :   4561.5 MB/s (6.6%)
 C copy prefetched (32 bytes step)                    :   4473.6 MB/s (10.2%)
 C copy prefetched (64 bytes step)                    :   5202.5 MB/s (6.6%)
 C 2-pass copy                                        :   3740.1 MB/s (6.3%)
 C 2-pass copy prefetched (32 bytes step)             :   3871.8 MB/s (5.9%)
 C 2-pass copy prefetched (64 bytes step)             :   3914.9 MB/s (3.5%)
 C fill                                               :   8656.4 MB/s (18.2%)
 C fill (shuffle within 16 byte blocks)               :   8217.4 MB/s (6.7%)
 C fill (shuffle within 32 byte blocks)               :   7527.5 MB/s (11.3%)
 C fill (shuffle within 64 byte blocks)               :   7439.6 MB/s (5.7%)
 ---
 standard memcpy                                      :   7153.7 MB/s (14.4%)
 standard memset                                      :  14374.6 MB/s (20.2%)
 ---
 MOVSB copy                                           :   4071.4 MB/s (8.0%)
 MOVSD copy                                           :   4493.7 MB/s (20.5%)
 SSE2 copy                                            :   3827.8 MB/s (16.6%)
 SSE2 nontemporal copy                                :   6351.1 MB/s (5.2%)
 SSE2 copy prefetched (32 bytes step)                 :   5395.5 MB/s (10.2%)
 SSE2 copy prefetched (64 bytes step)                 :   4828.2 MB/s (19.3%)
 SSE2 nontemporal copy prefetched (32 bytes step)     :   5723.2 MB/s (10.3%)
 SSE2 nontemporal copy prefetched (64 bytes step)     :   5741.2 MB/s (2.3%)
 SSE2 2-pass copy                                     :   4053.5 MB/s (5.0%)
 SSE2 2-pass copy prefetched (32 bytes step)          :   3442.4 MB/s (4.8%)
 SSE2 2-pass copy prefetched (64 bytes step)          :   3448.2 MB/s (3.8%)
 SSE2 2-pass nontemporal copy                         :   2562.5 MB/s (6.0%)
 SSE2 fill                                            :   8488.2 MB/s (12.1%)
 SSE2 nontemporal fill                                :  11856.4 MB/s (23.5%)

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read, [MADV_NOHUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    0.0 ns          /     0.0 ns 
    131072 :    0.0 ns          /     0.0 ns 
    262144 :    1.1 ns          /     0.0 ns 
    524288 :   10.4 ns          /     8.4 ns 
   1048576 :   15.7 ns          /    16.1 ns 
   2097152 :   36.2 ns          /    35.1 ns 
   4194304 :   95.4 ns          /   112.7 ns 
   8388608 :  130.2 ns          /   153.4 ns 
  16777216 :  148.8 ns          /   164.3 ns 
  33554432 :  156.8 ns          /   150.1 ns 
  67108864 :  223.7 ns          /   244.0 ns 

block size : single random read / dual random read, [MADV_HUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    1.1 ns          /     1.4 ns 
    131072 :    3.4 ns          /     3.5 ns 
    262144 :    8.5 ns          /    11.1 ns 
    524288 :   20.3 ns          /    22.9 ns 
   1048576 :   24.8 ns          /    27.4 ns 
   2097152 :   33.8 ns          /    34.0 ns 
   4194304 :   79.5 ns          /   107.6 ns 
   8388608 :  157.0 ns          /   183.6 ns 
  16777216 :  185.7 ns          /   212.9 ns 
  33554432 :  198.7 ns          /   223.7 ns 
  67108864 :  210.6 ns          /   232.9 ns 

#####
Memory - Run 5
2024-12-26 02:12:26
#####
tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   3062.9 MB/s (17.4%)
 C copy backwards (32 byte blocks)                    :   1445.1 MB/s (2.3%)
 C copy backwards (64 byte blocks)                    :   1309.2 MB/s (3.2%)
 C copy                                               :   1849.1 MB/s (9.3%)
 C copy prefetched (32 bytes step)                    :   2007.7 MB/s (7.4%)
 C copy prefetched (64 bytes step)                    :   1936.4 MB/s (15.2%)
 C 2-pass copy                                        :   1194.6 MB/s (8.2%)
 C 2-pass copy prefetched (32 bytes step)             :   1374.0 MB/s (7.8%)
 C 2-pass copy prefetched (64 bytes step)             :   1153.4 MB/s (6.0%)
 C fill                                               :   2444.4 MB/s (5.8%)
 C fill (shuffle within 16 byte blocks)               :   2370.5 MB/s (4.2%)
 C fill (shuffle within 32 byte blocks)               :   2579.5 MB/s (6.4%)
 C fill (shuffle within 64 byte blocks)               :   2609.4 MB/s (16.2%)
 ---
 standard memcpy                                      :   2268.7 MB/s (9.2%)
 standard memset                                      :   5418.5 MB/s (42.9%)
 ---
 MOVSB copy                                           :   1417.6 MB/s (28.8%)
 MOVSD copy                                           :   1589.0 MB/s (4.7%)
 SSE2 copy                                            :   1411.8 MB/s (17.9%)
 SSE2 nontemporal copy                                :   1725.0 MB/s (16.1%)
 SSE2 copy prefetched (32 bytes step)                 :   1685.7 MB/s (22.5%)
 SSE2 copy prefetched (64 bytes step)                 :   1708.0 MB/s (7.0%)
 SSE2 nontemporal copy prefetched (32 bytes step)     :   1800.1 MB/s (31.6%)
 SSE2 nontemporal copy prefetched (64 bytes step)     :   1988.2 MB/s (13.7%)
 SSE2 2-pass copy                                     :   1167.5 MB/s (10.6%)
 SSE2 2-pass copy prefetched (32 bytes step)          :   1075.1 MB/s (9.7%)
 SSE2 2-pass copy prefetched (64 bytes step)          :   1026.1 MB/s (29.8%)
 SSE2 2-pass nontemporal copy                         :    510.8 MB/s (25.4%)
 SSE2 fill                                            :   2041.1 MB/s (35.2%)
 SSE2 nontemporal fill                                :   5770.3 MB/s (23.5%)

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read, [MADV_NOHUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    0.0 ns          /     0.0 ns 
    131072 :    0.0 ns          /     0.0 ns 
    262144 :    0.0 ns          /     0.0 ns 
    524288 :    0.0 ns          /     0.0 ns 
   1048576 :    0.0 ns          /     0.0 ns 
   2097152 :   26.5 ns          /     4.9 ns 
   4194304 :   59.4 ns          /    49.3 ns 
   8388608 :   67.9 ns          /    53.8 ns 
  16777216 :   73.5 ns          /    54.3 ns 
  33554432 :   87.2 ns          /    69.8 ns 
  67108864 :  103.7 ns          /    97.9 ns 

block size : single random read / dual random read, [MADV_HUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.1 ns 
     16384 :    0.1 ns          /     0.4 ns 
     32768 :    0.5 ns          /     0.4 ns 
     65536 :    1.7 ns          /     2.3 ns 
    131072 :    2.0 ns          /     2.7 ns 
    262144 :    4.6 ns          /     5.8 ns 
    524288 :    8.6 ns          /    11.0 ns 
   1048576 :   12.5 ns          /    13.5 ns 
   2097152 :   43.6 ns          /    52.2 ns 
   4194304 :   61.7 ns          /    80.0 ns 
   8388608 :   64.8 ns          /    72.9 ns 
  16777216 :   72.7 ns          /    78.1 ns 
  33554432 :   83.4 ns          /    85.0 ns 
  67108864 :  108.4 ns          /   120.5 ns 

#####
Memory - Run 6
2024-12-26 02:20:59
#####
tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   7678.5 MB/s (4.4%)
 C copy backwards (32 byte blocks)                    :   7712.2 MB/s (4.4%)
 C copy backwards (64 byte blocks)                    :   7856.1 MB/s (4.5%)
 C copy                                               :   8253.1 MB/s (3.1%)
 C copy prefetched (32 bytes step)                    :   8377.0 MB/s (24.6%)
 C copy prefetched (64 bytes step)                    :   7534.5 MB/s (18.4%)
 C 2-pass copy                                        :   5700.1 MB/s (2.0%)
 C 2-pass copy prefetched (32 bytes step)             :   5882.0 MB/s (1.6%)
 C 2-pass copy prefetched (64 bytes step)             :   5754.2 MB/s (11.9%)
 C fill                                               :  14906.7 MB/s (28.1%)
 C fill (shuffle within 16 byte blocks)               :   9803.2 MB/s (8.2%)
 C fill (shuffle within 32 byte blocks)               :  12273.3 MB/s (15.9%)
 C fill (shuffle within 64 byte blocks)               :  13812.2 MB/s (15.6%)
 ---
 standard memcpy                                      :  11806.9 MB/s (5.6%)
 standard memset                                      :  40159.0 MB/s (1.2%)
 ---
 MOVSB copy                                           :   8498.2 MB/s (30.5%)
 MOVSD copy                                           :   5517.6 MB/s (14.0%)
 SSE2 copy                                            :   7037.2 MB/s (16.5%)
 SSE2 nontemporal copy                                :  10407.8 MB/s (8.9%)
 SSE2 copy prefetched (32 bytes step)                 :   8486.9 MB/s (1.1%)
 SSE2 copy prefetched (64 bytes step)                 :   9000.5 MB/s (8.1%)
 SSE2 nontemporal copy prefetched (32 bytes step)     :  10479.3 MB/s (14.4%)
 SSE2 nontemporal copy prefetched (64 bytes step)     :  10617.1 MB/s (2.9%)
 SSE2 2-pass copy                                     :   6408.6 MB/s (7.0%)
 SSE2 2-pass copy prefetched (32 bytes step)          :   6199.1 MB/s (5.1%)
 SSE2 2-pass copy prefetched (64 bytes step)          :   6532.8 MB/s (6.2%)
 SSE2 2-pass nontemporal copy                         :   5097.5 MB/s (7.2%)
 SSE2 fill                                            :  18878.1 MB/s (1.4%)
 SSE2 nontemporal fill                                :  39193.1 MB/s (8.6%)

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read, [MADV_NOHUGEPAGE]
      1024 :    0.1 ns          /     0.1 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.1 ns 
     32768 :    0.2 ns          /     0.2 ns 
     65536 :    1.7 ns          /     2.2 ns 
    131072 :    3.0 ns          /     4.1 ns 
    262144 :    5.9 ns          /     7.3 ns 
    524288 :    9.4 ns          /    11.1 ns 
   1048576 :   11.7 ns          /    13.9 ns 
   2097152 :   15.5 ns          /    18.3 ns 
   4194304 :   37.3 ns          /    49.4 ns 
   8388608 :   62.1 ns          /    76.9 ns 
  16777216 :   76.5 ns          /    84.7 ns 
  33554432 :   86.3 ns          /    95.0 ns 
  67108864 :  120.9 ns          /   133.2 ns 

block size : single random read / dual random read, [MADV_HUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.1 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.1 ns          /     0.0 ns 
     16384 :    0.1 ns          /     0.2 ns 
     32768 :    0.2 ns          /     0.6 ns 
     65536 :    1.6 ns          /     2.1 ns 
    131072 :    2.6 ns          /     3.3 ns 
    262144 :    4.5 ns          /     5.7 ns 
    524288 :    9.2 ns          /    11.4 ns 
   1048576 :   12.8 ns          /    14.8 ns 
   2097152 :   25.3 ns          /    30.3 ns 
   4194304 :   42.0 ns          /    53.7 ns 
   8388608 :   64.6 ns          /    74.7 ns 
  16777216 :   73.3 ns          /    81.0 ns 
  33554432 :  110.5 ns          /   122.5 ns 
  67108864 :  141.9 ns          /   167.1 ns 

